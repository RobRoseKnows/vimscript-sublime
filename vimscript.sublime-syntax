%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Vimscript
scope: source.vimscript
file_extensions:
  - vim
  - vimrc
  - .vimrc

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: strings

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(?:end)?(if|else|for|while|end|return|try)\b'
      scope: keyword.control.vim

    - match: '\b(?:end)?(function)\b'
      scope:  entity.name.context.vim

    - match: '\b(let)\b'
      scope: storage.type.function.vim

  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.vim

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.vim
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.vim
    - match: '\.'
      scope: constant.character.escape.vim
    - match: '"'
      scope: punctuation.definition.string.end.vim
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '"'
      scope: punctuation.definition.comment.vimscript
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.vim
        - match: $\n?
          pop: true
